<?php

/**
 * Implementation of hook_init()
 */
function civicrmdesjardins_init() {
  if (arg(0) == 'civicrm' && (arg(1) == 'contribute' || arg(1) == 'event')) {
    drupal_add_css(drupal_get_path('module', 'civicrmdesjardins') . '/civicrmdesjardins.css');
    drupal_add_js(drupal_get_path('module', 'civicrmdesjardins') . '/civicrmdesjardins.js');

    // In Chromium, without the "no-store" directive, the browser still keeps some data
    // in cache, although mainly just the confirmation page. With no-store, as soon as the
    // user hits the "Back" button, he goes back to a new empty form.
    // Also, $this->controller->reset( ); did not seem to delete the user email from the form.
    drupal_add_http_header('Cache-Control', 'no-store, no-cache, must-revalidate, post-check=0, pre-check=0', TRUE);
  }
}

/**
 * Implementation of hook_civicrm_config()
 */
function civicrmdesjardins_civicrm_config(&$config) {
  // set extention path to this module's directory
  $config =& CRM_Core_Config::singleton( );
  $config->extensionsDir = drupal_get_path('module', 'civicrmdesjardins') . '/extensions/';
  $config->extensionsURL = CIVICRM_UF_BASEURL . '/' . drupal_get_path('module', 'civicrmdesjardins');
}

/**
 * Implementation of hook_menu()
 */
function civicrmdesjardins_menu() {
  $items['civicrmdesjardins/validate'] = array(
    'title' => 'CiviCRM Desjardins transaction validation',
    'description' => 'Responds to Desjardins transaction pings to see if they are valid.',
    'page callback' => 'civicrmdesjardins_validate',
    'type' => MENU_CALLBACK,
    'access callback' => TRUE,
  );
  return $items;
}

/**
 * Implementation of hook_civicrm_buildForm()
 */
function civicrmdesjardins_civicrm_buildForm($formName, &$form) {
  /*
   * Donation forms
   */
  if ($formName == 'CRM_Contribute_Form_Contribution_Main') {
    //
    // Format amount 10.00$ to 10$
    //
    if ($form->elementExists('amount')) {
      $amounts  =& $form->getElement('amount');
      $elements =& $amounts->getElements();
  
      foreach ($elements as $key => $val) {
        $text = $elements[$key]->getText();
        $text = preg_replace('/\.00 \$/', ' $', $text);
        $elements[$key]->setText($text);
      }
    }
  }

  if ($formName == 'CRM_Contribute_Form_Contribution_ThankYou') {
    // Clear out some of the sensitive fields to avoid a replay attack
    // i.e. after a successful transaction, the user can go "Back" and
    // do the same transaction again.
  }
}

/**
 * hook_civicrm_tokens() implementation
 * expose the "receipt" token to email messages
 */
function civicrmdesjardins_civicrm_tokens(&$tokens) {
  if (arg(0) == 'civicrm' && arg(1) == 'contribute') {
    $tokens['contribution'] = array(
      'contribution.desjardins_receipt' => 'Desjardins CC receipt',
    );
  }
}

/**
 * hook_civicrm_tokenValues() implementation
 */
function civicrmdesjardins_civicrm_tokenValues( &$details, &$contactIDs ) {
  $value = array();

  if (! (arg(0) == 'civicrm' && arg(1) == 'contribute')) {
    return $value;
  }

  // Prepare the contact ID(s) for use in a database query
  //
  // [ML]Â this is based on an example from the civi book
  // In our context of contrib receipts, having multiple contactIDs does
  // not make sense, but leaving the code just in case.
  if ( is_array( $contactIDs ) ) {
    $id_contact = $contactIDs['contact_id'];
    // watchdog('civicrmdesjardins', 'Sending email receipt for contact ID: ' . $id_contact . ' (A)');
  } else {
    $id_contact = $contactIDs;
    // watchdog('civicrmdesjardins', 'Sending email receipt for contact ID: ' . $id_contact . ' (B)');
  }

  // Fetch the receipt (assume latest)
  $tx = db_query("select invoice_id from {civicrm_contribution} where contact_id = :id order by receive_date desc limit 1", array(':id' => $id_contact))->fetchField();
  $receipt = db_query("select receipt from {civicrmdesjardins_receipt} where trx_id = :tx", array(':tx' => $tx))->fetchField();

  $details['contribution.desjardins_receipt'] = $receipt;
}

/**
 * Returns the Desjardins receipt for the transaction
 * Add this in your ThankYou.tpl : {$trxn_id|civicrmdesjardins_receipt}
 */
function smarty_modifier_civicrmdesjardins_receipt($trx_id) {
  return civicrmdesjardins_receipt($trx_id);
}

/**
 * Returns a text credit card transaction receipt for the contribution.
 */
function civicrmdesjardins_receipt($trx_id) {
  return db_query('SELECT receipt FROM {civicrmdesjardins_receipt} WHERE trx_id = :trx_id', array(':trx_id' => $trx_id))->fetchField();
}

/**
 * Returns the receipt given a participant_id (registration)
 */
function civicrmdesjardins_receipt_from_participant_id($participant_id) {
  $contribution_id = db_query('SELECT contribution_id FROM {civicrm_participant_payment} WHERE participant_id = :id', array(':id' => $participant_id))->fetchField();
  $trx_id = db_query('SELECT trxn_id FROM {civicrm_contribution} WHERE id = :id', array(':id' => $contribution_id))->fetchField();
  return civicrmdesjardins_receipt($trx_id);
}

